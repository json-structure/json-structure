// Code generated by go-bindata.
// sources:
// testsuite/invalid-json-structure/array.json
// testsuite/invalid-json-structure/embedded.json
// testsuite/invalid-json-structure/format.json
// testsuite/invalid-json-structure/general.json
// testsuite/invalid-json-structure/integer.json
// testsuite/invalid-json-structure/map.json
// testsuite/invalid-json-structure/set.json
// testsuite/invalid-json-structure/string.json
// testsuite/invalid-json-structure/struct.json
// testsuite/invalid-json-structure/union.json
// DO NOT EDIT!

package testsuite

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testsuiteInvalidJsonStructureArrayJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x93\x41\x6a\xc3\x30\x10\x45\xf7\x3a\xc5\x67\xd6\x29\x34\x5b\xdf\xa0\x67\x28\x5d\x4c\xe3\xb1\x3b\x60\x4b\x61\x34\x09\x0d\x25\x77\x2f\x71\x54\x13\x84\x53\x0a\x35\x59\x19\x7f\x46\x9f\xf7\x18\xe9\x35\x00\x5f\x01\x00\xa8\x95\xbc\x33\xdd\xbb\xa6\x48\x0d\x48\x5d\xc6\x0c\xcd\x18\x35\x67\x8d\x3d\x6d\xae\x63\xd9\xed\xb0\xf3\x83\x09\x35\xe5\x24\x40\x23\x6b\xbc\xf9\x07\xc8\x4f\xfb\xcb\x04\xb1\x19\x9f\xa8\xe4\xe7\xe9\x7b\x2e\x4d\x47\x1e\xb4\xa5\x06\x1d\x0f\x59\xc2\x25\x9f\x0a\x6a\x90\x51\xe3\xcb\x0f\x4b\x94\x9e\x5d\x8f\x32\xc1\x2c\xa0\xd4\x20\x15\xc6\x66\xe6\x2d\x9d\xd4\xe0\x69\x3b\xa7\x5a\xa2\x05\x8d\xf7\x94\x06\xe1\x58\x89\x84\x22\x53\xa9\xdc\x13\xe1\xcf\xf5\x45\x4a\xe7\x63\x45\x6e\x36\xd2\x9b\xb0\x8b\xc1\x3f\x38\x62\xa6\x59\x6f\x3d\xdb\x25\xd5\xe7\xd5\x4d\xef\xde\xbe\xeb\x33\xe8\x54\x86\x16\x62\x96\xec\xbf\x6e\xbf\x10\x77\x29\xfd\x71\x2f\xe1\xed\x3b\x00\x00\xff\xff\xae\x92\xfc\x02\xb9\x03\x00\x00")

func testsuiteInvalidJsonStructureArrayJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureArrayJson,
		"testsuite/invalid-json-structure/array.json",
	)
}

func testsuiteInvalidJsonStructureArrayJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureArrayJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/array.json", size: 953, mode: os.FileMode(420), modTime: time.Unix(1489584303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureEmbeddedJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x92\x4b\x6a\xc3\x30\x10\x86\xf7\x3e\xc5\xcf\xac\x4d\xb0\xdb\x9d\xaf\x12\xbc\x50\xec\x71\x23\x18\x49\x46\x8f\x84\x52\x72\xf7\x22\x55\x6d\x83\xdb\x52\x68\x0a\x59\x99\xf1\x3c\xbe\x4f\x23\xed\x1b\xe0\xa5\x01\x00\x9a\x39\x4c\x5e\xaf\x51\x3b\x4b\x43\x0e\x17\x95\x24\x42\x07\x9c\xbd\xb3\x4f\x88\xcf\x2b\x53\xfb\x56\x1b\xa2\x4f\x53\x4c\x9e\x69\xa8\xed\x00\x19\xa5\xed\x55\x0c\x50\x69\x19\x40\x36\x99\x03\xfb\xda\x5c\x61\x65\x7a\x4e\x1e\x59\xc4\xe1\xec\xbc\xcc\x54\x0b\x2e\xe5\x7b\xa9\xb0\x93\x12\x3d\xd3\x80\x45\x49\xe0\x26\xff\x2f\x8c\xad\x30\xdb\x64\x70\x54\x01\x73\x5a\x45\x4f\x2a\x32\x58\xd8\xb0\x8d\xa1\x90\xbf\x91\xde\x2a\xff\x24\x5c\x66\xd3\x80\x3d\xfa\xae\x45\xdf\xed\x3a\x8c\xcd\xbb\x68\xd1\xdc\x48\xde\x57\x71\x97\x25\xb9\xff\x9b\xe3\xd5\xbd\x5b\x17\xa1\x60\x38\x83\xe0\x16\x14\xc4\xff\x79\xb6\x78\x68\xf1\x88\xf1\x23\xf5\xf9\x28\xba\x9b\xb6\x6b\x93\x08\x4e\x4a\x12\xdf\x6c\x9b\x47\xa9\x83\xe4\x5c\xf4\x89\xbf\x9e\xa2\xb0\x7e\x59\x74\x33\xbe\x06\x00\x00\xff\xff\x5a\xdc\x0e\xf2\x67\x03\x00\x00")

func testsuiteInvalidJsonStructureEmbeddedJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureEmbeddedJson,
		"testsuite/invalid-json-structure/embedded.json",
	)
}

func testsuiteInvalidJsonStructureEmbeddedJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureEmbeddedJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/embedded.json", size: 871, mode: os.FileMode(420), modTime: time.Unix(1489587611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureFormatJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8e\x4d\x8e\x83\x30\x0c\x85\xf7\x39\xc5\x93\xd7\x33\x17\xc8\x55\x46\xb3\x30\x24\xa0\xa8\xc1\x8e\x82\x29\xaa\x2a\xee\x5e\x01\x59\x74\xc1\xa2\xea\x2a\xb1\xdf\x8f\xbf\x3f\x07\x3c\x1d\x00\x50\x88\x73\x5f\x53\xb1\xa4\x42\x1e\xb4\xc8\x4d\x74\x15\x0c\x5a\x27\x36\xfa\x39\x4d\xb3\xd5\xa5\xb7\xa5\x46\xf2\x2d\x07\xd0\xc4\x49\xde\x66\x80\xec\x51\x76\xc7\x6e\x4f\x32\xb6\xf0\xa1\xb4\x3a\xbf\xff\xb4\xe3\x4a\x4d\xda\x8e\x77\x6b\x67\xee\x9c\x53\x20\x8f\x81\xf3\x1c\x5d\xdb\x5f\x73\x9e\x85\xe0\x52\x72\x8a\x01\xa6\x58\xab\xca\x88\x03\xe1\x3b\xea\x4e\x35\x47\x96\x6b\xec\xc0\x16\x7f\x2d\x4d\xf1\x43\x72\xf7\xff\x0a\x00\x00\xff\xff\x79\xc7\x50\x01\x64\x01\x00\x00")

func testsuiteInvalidJsonStructureFormatJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureFormatJson,
		"testsuite/invalid-json-structure/format.json",
	)
}

func testsuiteInvalidJsonStructureFormatJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureFormatJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/format.json", size: 356, mode: os.FileMode(420), modTime: time.Unix(1489587978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureGeneralJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\xcb\x6e\xc2\x30\x10\xbc\xe7\x2b\x56\x7b\xee\xa1\xe7\xfc\x41\xa5\x56\xfd\x80\xaa\x07\xe3\x6c\xe8\xaa\x7e\xc9\x0f\x0a\x42\xf9\xf7\x0a\x13\xc0\x0e\x06\xa1\xf6\x16\xcd\xcc\xee\xcc\x78\xf3\xd1\x01\xec\x3b\x00\x00\x1c\x28\x48\xcf\x2e\xb2\x35\xd8\x03\x6a\x0e\x81\xcd\x1a\xe2\xce\x11\x0c\x24\x95\xf0\x22\x73\x4f\x47\x79\x88\x3e\xc9\x98\x3c\x61\x3f\x6f\x00\x40\x2d\xf8\x30\xbc\x9f\x32\x30\xcd\xd2\x8d\x50\x3c\x60\x0f\xa3\x50\x81\xba\x19\x6f\xbb\x26\xf3\x6d\xec\x8f\xc9\xae\x0f\x39\x01\x66\x69\x0f\x38\x5a\x8b\xf0\x67\xe3\x5c\x53\xee\xa4\xba\x6f\x7b\x90\x85\x02\x00\x40\x51\xc7\x58\xe1\xc9\x3e\xb3\xab\x9a\x15\xa7\x88\x70\x51\x35\xba\xac\xac\x55\x24\xcc\x3f\xfa\xb0\xc9\x62\x70\xde\x3a\xf2\x91\x29\x3c\xf4\x9c\x97\xe0\xcb\x28\x45\x27\x9d\x54\x64\xa7\xe8\x7d\xc4\x1e\x9e\x4b\x82\x0d\xeb\xa4\x17\x28\x6d\xa5\x4a\x81\x37\xf4\xd6\xa4\xb5\xd8\xde\x1d\x6a\xd2\x4e\xc4\x48\xde\x9c\xee\x5e\x67\x78\x25\xb3\x8e\x5f\xd7\x36\x4d\x7c\x64\x52\x43\x7d\x52\x38\x2e\xad\xa1\xc6\x93\x14\xec\x74\xfe\x2e\x8f\xcf\x91\xf4\xd5\xea\x9b\x5b\xa6\xba\xc5\xcb\x3c\xbc\x28\x71\x86\xbb\xd2\xf9\xe6\x1f\xd2\x7d\xfe\x06\x00\x00\xff\xff\xc6\xfd\x3f\xc0\xe3\x03\x00\x00")

func testsuiteInvalidJsonStructureGeneralJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureGeneralJson,
		"testsuite/invalid-json-structure/general.json",
	)
}

func testsuiteInvalidJsonStructureGeneralJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureGeneralJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/general.json", size: 995, mode: os.FileMode(420), modTime: time.Unix(1489587780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureIntegerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xcf\x6a\xc3\x30\x0c\xc6\xef\x7e\x8a\x0f\x9d\x37\x68\xaf\x7e\x87\xb1\x07\x18\x3b\x98\x46\xcd\x04\xb6\x17\xfc\x27\x74\x8c\xbe\xfb\x68\xe2\x66\x23\x75\x0b\x2b\xee\x29\x44\x96\x3e\xfd\x3e\x49\x6f\x0a\xf8\x56\x00\x40\x1d\xc7\x5d\x90\x21\xc9\xa7\x27\x0d\x72\xd9\x26\x19\x2c\xbf\xee\x21\x11\x9e\x7b\x93\x64\x64\x7a\x9a\x93\x63\x0a\x79\x97\x72\x60\xd2\xa5\x1e\x20\x67\xc4\xff\xf9\x07\x28\x7d\x0d\xa7\x0c\x12\x9f\xb8\xe7\x50\xaa\xe7\xe4\x45\x9f\x34\x9e\xb7\xe5\xe1\x38\x7d\x8f\xa5\xcb\x68\xac\x74\xa4\xb1\x37\x36\xb2\x3a\xc5\x27\xf1\x0b\x54\xf1\xe2\xb2\x83\xf1\x1d\xf8\xb0\xb3\x39\xca\xc8\x2f\x73\x70\x6a\x59\xc1\x5d\xc3\x5e\x45\x3d\xab\x93\xc6\x66\x89\x5d\x74\xd1\xd8\xa8\x33\xff\x44\xbf\x62\xbf\x46\x6e\x0e\x15\xf2\x39\xd8\x80\xbc\x08\xd5\xc9\x7f\x1f\xef\x22\x2f\x33\xef\x03\x9b\xc4\x01\xe9\xc3\x78\xb8\x66\xe4\xcb\x58\xb7\x35\x37\xf7\x00\xaf\x57\xf6\x20\xf2\xca\x65\x34\xb3\x50\x9d\xf9\x03\xce\xa6\x42\xde\xea\x6c\x6e\x6f\xa1\xbd\x97\x9b\xeb\xf8\xbf\x29\xf5\xfe\x13\x00\x00\xff\xff\xec\xf4\x0e\xcc\x31\x05\x00\x00")

func testsuiteInvalidJsonStructureIntegerJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureIntegerJson,
		"testsuite/invalid-json-structure/integer.json",
	)
}

func testsuiteInvalidJsonStructureIntegerJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureIntegerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/integer.json", size: 1329, mode: os.FileMode(420), modTime: time.Unix(1489583344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureMapJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x8a\x1f\x9d\x3b\x58\xaf\x79\x83\x3d\xc3\xd8\x41\x6b\x94\x4c\x10\xdb\xc1\x56\xcb\xc6\xe8\xbb\x8f\xa6\x5e\xe8\x4c\x32\x06\x0b\x3d\x19\xff\x48\xe2\xfb\x90\x9e\x1d\xf0\xe9\x00\x80\x5a\xc9\x87\xa4\xa3\x69\x0c\xd4\x80\xd4\xc4\x67\x68\x86\xd7\x9c\x35\xf4\xb4\xbb\x96\x65\x4b\xc7\x83\x1d\x93\x50\x53\x3a\x01\xf2\xac\xe1\xe6\x0f\x90\x7d\x8c\x97\x0a\xf2\x3c\x52\x49\xcf\xd3\x7b\x2e\x73\x4e\x3c\x68\x4b\x0d\x3a\x1e\xb2\xb8\x4b\x3e\xb5\xd7\x18\x5e\xc3\xd3\x37\x49\x90\x9e\x4d\x4f\x32\xa1\x2c\x80\xd4\x18\x3f\x20\x76\x33\x6b\x99\x48\x0d\x1e\xf6\x73\xaa\x25\x5a\x50\x78\x8d\x71\x10\x0e\x95\x86\x2b\x2a\x95\xc8\x9a\x06\xbf\x6f\xad\x51\x26\xde\x57\xe3\x66\x1b\x7d\x12\x36\x49\xb0\x37\x0e\x98\x69\xb6\x5a\xcd\x7e\x49\xf4\x71\x73\xcf\xd5\xbb\xbb\x9e\x7f\xa7\x32\xb4\x90\x94\x62\xfa\x9f\xd9\x2f\xbc\x5d\x8c\x7f\xdc\x89\x7b\xf9\x0a\x00\x00\xff\xff\x45\x87\x6c\x9d\xaf\x03\x00\x00")

func testsuiteInvalidJsonStructureMapJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureMapJson,
		"testsuite/invalid-json-structure/map.json",
	)
}

func testsuiteInvalidJsonStructureMapJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureMapJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/map.json", size: 943, mode: os.FileMode(420), modTime: time.Unix(1489584611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureSetJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x8a\x1f\x9d\x3b\x58\xaf\x79\x83\x3d\xc3\xd8\xc1\x6b\x94\x4c\x90\xd8\x45\x52\xcb\xc6\xe8\xbb\x8f\xa6\x5e\xe8\x4c\x3a\x06\x0b\x3d\x19\xff\x48\xe2\xfb\x90\x9e\x03\xf0\x19\x00\x80\x5a\xb6\x9d\xca\xde\x25\x27\x6a\x40\xe2\x3c\x1a\xc4\x30\x8a\x99\xa4\x9e\x36\x97\x32\x73\x3d\xec\xfc\xa0\x4c\x4d\xe9\x04\x68\x8c\x92\xae\xfe\x00\xf9\xc7\xfe\x5c\x41\xc6\x4e\x25\x3d\x4d\xef\xa9\xcc\x39\xc6\x41\x5a\x6a\xd0\xc5\xc1\x38\x9c\xf3\xa9\xbd\xc6\x18\x25\x3d\x7d\x93\x24\xee\xa3\xcb\x91\x27\x94\x05\x90\x1a\xe3\x07\xc4\x66\x66\x2d\x13\xa9\xc1\xc3\x76\x4e\xa5\x44\x0b\x0a\xaf\x39\x0f\x1c\x53\xa5\x11\x8a\x4a\x25\x72\x4b\x23\xbe\xaf\xad\x51\x26\xde\x57\xe3\x6a\x1b\xbd\x72\x74\x56\xf8\x5b\x4c\x98\x69\xd6\x5a\xcd\x76\x49\xf4\x71\x75\xcf\x9b\x77\x77\x39\xff\x4e\x78\x68\xc1\xaa\x59\xff\x67\xf6\x0b\x6f\x97\xf3\x1f\x77\x12\x5e\xbe\x02\x00\x00\xff\xff\xdc\x50\xd2\x78\xaf\x03\x00\x00")

func testsuiteInvalidJsonStructureSetJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureSetJson,
		"testsuite/invalid-json-structure/set.json",
	)
}

func testsuiteInvalidJsonStructureSetJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureSetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/set.json", size: 943, mode: os.FileMode(420), modTime: time.Unix(1489584611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureStringJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\xd0\xc1\x4a\xc3\x40\x10\x06\xe0\xfb\x3e\xc5\xcf\x9c\x2a\x55\xb1\xd7\x7d\x06\xdf\xc0\x7a\x58\x9a\x71\x3b\x90\x4e\xc3\xee\xa4\x54\x24\xef\x2e\x49\xb7\xa6\xd4\x06\xa1\x01\x4f\x21\xc3\x3f\xff\x7e\xcc\x9b\x03\xbe\x1c\x00\x50\xc5\x79\x93\xa4\x31\xd9\x2b\x79\xd0\x4e\xf4\x95\x35\xda\x16\x92\xa1\x1c\x83\xc9\x81\xe9\xf1\x94\xcd\x96\xda\x8d\xb5\x89\xc9\x97\x75\x80\x76\x41\xf4\xe2\x1f\x20\xfb\x6c\xfa\x44\x1f\x17\x8d\x65\xf9\x94\x3d\xb7\x93\xc7\xd3\xaa\xcc\xbb\xe1\xdb\x95\x37\x0e\xa1\x96\x8a\x3c\x3e\x42\x9d\xd9\xf5\xf3\xa1\xfa\x97\x33\x1c\x27\x9c\x37\x94\xd7\xc6\x29\xe1\xd8\x3a\xfa\x3a\x57\x6c\x57\xb2\x29\xd7\xcf\xfd\x62\xe2\x60\x9c\x60\xdb\xa0\x18\x8b\x67\x13\x2f\x4e\xb8\xba\x09\x7f\xb9\xc7\xad\xc3\x01\x91\x38\xb6\x75\x48\xe0\x63\x93\x38\x67\xd9\x2b\x9a\x60\xc6\x49\x67\xc3\xcf\x3d\x1e\xb4\x5e\x57\x4b\xba\x47\x29\x3a\xc4\xfe\x89\xb9\x58\x3c\x2f\x1f\xfe\x70\xba\xf7\xef\x00\x00\x00\xff\xff\x42\x2d\x52\x0a\x4c\x03\x00\x00")

func testsuiteInvalidJsonStructureStringJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureStringJson,
		"testsuite/invalid-json-structure/string.json",
	)
}

func testsuiteInvalidJsonStructureStringJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureStringJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/string.json", size: 844, mode: os.FileMode(420), modTime: time.Unix(1489588454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureStructJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x4b\x0a\xc3\x30\x10\x43\xf7\x3e\x85\x98\x75\x4e\x90\xab\x94\x2e\x42\xe2\x94\x81\xc4\x0e\x33\x4e\xa1\x14\xdf\xbd\xf8\xd3\x12\x9b\xae\x8c\x35\x92\x78\xba\x19\xe0\x6d\x00\x80\x16\xab\xb3\xf0\x11\xd8\x3b\x1a\x41\x2b\xdb\x6d\x51\xb0\x62\x67\x55\x76\x0f\x1a\x8a\x4f\x83\x9c\x73\x38\xc5\xd2\x58\xa3\x00\xed\x13\xbb\xcb\x1f\xa0\xf0\x3a\x92\xa3\xda\xa9\x1e\x62\x7e\x63\xad\x7a\x4e\x1b\x2f\x34\x62\x9d\x36\xb5\x26\xe9\xb9\xa1\x47\x29\x15\xc8\x44\xb0\x22\x5e\x32\xcb\x1f\x92\x9e\xa3\xa7\x18\xbe\x7a\x59\xd7\x12\xaf\xde\x37\xc2\x25\x9e\x4e\x3f\x3d\xb6\x5b\x4c\xdd\xd3\xad\x89\xe6\xfe\x09\x00\x00\xff\xff\xba\x11\x32\x1d\x5d\x01\x00\x00")

func testsuiteInvalidJsonStructureStructJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureStructJson,
		"testsuite/invalid-json-structure/struct.json",
	)
}

func testsuiteInvalidJsonStructureStructJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureStructJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/struct.json", size: 349, mode: os.FileMode(420), modTime: time.Unix(1489584044, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureUnionJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\x41\xca\x83\x30\x10\x85\xf7\x39\xc5\x63\xd6\x9e\xc0\xab\xfc\xfc\x0b\xd1\xb1\x0c\x68\x22\x33\xb1\x20\x25\x77\x2f\xd1\xd0\xaa\xd4\x45\xa1\xab\x90\x2f\xf3\x1e\x5f\xe6\xcf\x01\x0f\x07\x00\xd4\xb1\xb5\x2a\x53\x94\xe0\xa9\x06\xc5\x65\x62\x83\x18\x46\x31\x13\x7f\xa3\x6a\x1b\xb3\xa8\x73\x1b\x67\x65\xaa\x4b\x12\xa0\xb1\x11\xbf\xbb\x63\x8b\xe7\x9a\xd9\xe7\xbe\xc2\xd3\x7a\xa6\xd2\x74\x6f\x06\xe9\xa8\x46\xdf\x0c\xc6\x2e\xf3\xb5\xe0\x52\x84\xc7\x29\x2e\xab\xc6\x07\x89\xb3\xc2\x49\xa0\xda\x63\xcb\x73\xc5\xc5\x15\x9f\xef\x6c\x58\x35\xe8\xcf\x54\xde\x5b\xeb\x43\x38\x80\x5d\x38\x3f\xbd\x78\x3a\x2e\xf4\xe2\x13\xc9\xfd\x3f\x03\x00\x00\xff\xff\xd9\x69\xb6\x6a\xe0\x01\x00\x00")

func testsuiteInvalidJsonStructureUnionJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureUnionJson,
		"testsuite/invalid-json-structure/union.json",
	)
}

func testsuiteInvalidJsonStructureUnionJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureUnionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/union.json", size: 480, mode: os.FileMode(420), modTime: time.Unix(1489585735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testsuite/invalid-json-structure/array.json": testsuiteInvalidJsonStructureArrayJson,
	"testsuite/invalid-json-structure/embedded.json": testsuiteInvalidJsonStructureEmbeddedJson,
	"testsuite/invalid-json-structure/format.json": testsuiteInvalidJsonStructureFormatJson,
	"testsuite/invalid-json-structure/general.json": testsuiteInvalidJsonStructureGeneralJson,
	"testsuite/invalid-json-structure/integer.json": testsuiteInvalidJsonStructureIntegerJson,
	"testsuite/invalid-json-structure/map.json": testsuiteInvalidJsonStructureMapJson,
	"testsuite/invalid-json-structure/set.json": testsuiteInvalidJsonStructureSetJson,
	"testsuite/invalid-json-structure/string.json": testsuiteInvalidJsonStructureStringJson,
	"testsuite/invalid-json-structure/struct.json": testsuiteInvalidJsonStructureStructJson,
	"testsuite/invalid-json-structure/union.json": testsuiteInvalidJsonStructureUnionJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"testsuite": &bintree{nil, map[string]*bintree{
		"invalid-json-structure": &bintree{nil, map[string]*bintree{
			"array.json": &bintree{testsuiteInvalidJsonStructureArrayJson, map[string]*bintree{}},
			"embedded.json": &bintree{testsuiteInvalidJsonStructureEmbeddedJson, map[string]*bintree{}},
			"format.json": &bintree{testsuiteInvalidJsonStructureFormatJson, map[string]*bintree{}},
			"general.json": &bintree{testsuiteInvalidJsonStructureGeneralJson, map[string]*bintree{}},
			"integer.json": &bintree{testsuiteInvalidJsonStructureIntegerJson, map[string]*bintree{}},
			"map.json": &bintree{testsuiteInvalidJsonStructureMapJson, map[string]*bintree{}},
			"set.json": &bintree{testsuiteInvalidJsonStructureSetJson, map[string]*bintree{}},
			"string.json": &bintree{testsuiteInvalidJsonStructureStringJson, map[string]*bintree{}},
			"struct.json": &bintree{testsuiteInvalidJsonStructureStructJson, map[string]*bintree{}},
			"union.json": &bintree{testsuiteInvalidJsonStructureUnionJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

