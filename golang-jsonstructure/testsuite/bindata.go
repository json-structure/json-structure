// Code generated by go-bindata.
// sources:
// testsuite/invalid-json-structure/array.json
// testsuite/invalid-json-structure/embedded.json
// testsuite/invalid-json-structure/format.json
// testsuite/invalid-json-structure/general.json
// testsuite/invalid-json-structure/integer.json
// testsuite/invalid-json-structure/map.json
// testsuite/invalid-json-structure/set.json
// testsuite/invalid-json-structure/string.json
// testsuite/invalid-json-structure/struct.json
// testsuite/invalid-json-structure/union.json
// testsuite/json-object/boolean.json
// testsuite/json-object/integer.json
// testsuite/json-object/number.json
// testsuite/json-object/string.json
// DO NOT EDIT!

package testsuite

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testsuiteInvalidJsonStructureArrayJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x93\x41\x6a\xc3\x30\x10\x45\xf7\x3a\xc5\x67\xd6\x29\x34\x5b\xdf\xa0\x67\x28\x5d\x4c\xe3\xb1\x3b\x60\x4b\x61\x34\x09\x0d\x25\x77\x2f\x71\x54\x13\x84\x53\x0a\x35\x59\x19\x7f\x46\x9f\xf7\x18\xe9\x35\x00\x5f\x01\x00\xa8\x95\xbc\x33\xdd\xbb\xa6\x48\x0d\x48\x5d\xc6\x0c\xcd\x18\x35\x67\x8d\x3d\x6d\xae\x63\xd9\xed\xb0\xf3\x83\x09\x35\xe5\x24\x40\x23\x6b\xbc\xf9\x07\xc8\x4f\xfb\xcb\x04\xb1\x19\x9f\xa8\xe4\xe7\xe9\x7b\x2e\x4d\x47\x1e\xb4\xa5\x06\x1d\x0f\x59\xc2\x25\x9f\x0a\x6a\x90\x51\xe3\xcb\x0f\x4b\x94\x9e\x5d\x8f\x32\xc1\x2c\xa0\xd4\x20\x15\xc6\x66\xe6\x2d\x9d\xd4\xe0\x69\x3b\xa7\x5a\xa2\x05\x8d\xf7\x94\x06\xe1\x58\x89\x84\x22\x53\xa9\xdc\x13\xe1\xcf\xf5\x45\x4a\xe7\x63\x45\x6e\x36\xd2\x9b\xb0\x8b\xc1\x3f\x38\x62\xa6\x59\x6f\x3d\xdb\x25\xd5\xe7\xd5\x4d\xef\xde\xbe\xeb\x33\xe8\x54\x86\x16\x62\x96\xec\xbf\x6e\xbf\x10\x77\x29\xfd\x71\x2f\xe1\xed\x3b\x00\x00\xff\xff\xae\x92\xfc\x02\xb9\x03\x00\x00")

func testsuiteInvalidJsonStructureArrayJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureArrayJson,
		"testsuite/invalid-json-structure/array.json",
	)
}

func testsuiteInvalidJsonStructureArrayJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureArrayJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/array.json", size: 953, mode: os.FileMode(420), modTime: time.Unix(1489584303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureEmbeddedJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x92\x4b\x6a\xc3\x30\x10\x86\xf7\x3e\xc5\xcf\xac\x4d\xb0\xdb\x9d\xaf\x12\xbc\x50\xec\x71\x23\x18\x49\x46\x8f\x84\x52\x72\xf7\x22\x55\x6d\x83\xdb\x52\x68\x0a\x59\x99\xf1\x3c\xbe\x4f\x23\xed\x1b\xe0\xa5\x01\x00\x9a\x39\x4c\x5e\xaf\x51\x3b\x4b\x43\x0e\x17\x95\x24\x42\x07\x9c\xbd\xb3\x4f\x88\xcf\x2b\x53\xfb\x56\x1b\xa2\x4f\x53\x4c\x9e\x69\xa8\xed\x00\x19\xa5\xed\x55\x0c\x50\x69\x19\x40\x36\x99\x03\xfb\xda\x5c\x61\x65\x7a\x4e\x1e\x59\xc4\xe1\xec\xbc\xcc\x54\x0b\x2e\xe5\x7b\xa9\xb0\x93\x12\x3d\xd3\x80\x45\x49\xe0\x26\xff\x2f\x8c\xad\x30\xdb\x64\x70\x54\x01\x73\x5a\x45\x4f\x2a\x32\x58\xd8\xb0\x8d\xa1\x90\xbf\x91\xde\x2a\xff\x24\x5c\x66\xd3\x80\x3d\xfa\xae\x45\xdf\xed\x3a\x8c\xcd\xbb\x68\xd1\xdc\x48\xde\x57\x71\x97\x25\xb9\xff\x9b\xe3\xd5\xbd\x5b\x17\xa1\x60\x38\x83\xe0\x16\x14\xc4\xff\x79\xb6\x78\x68\xf1\x88\xf1\x23\xf5\xf9\x28\xba\x9b\xb6\x6b\x93\x08\x4e\x4a\x12\xdf\x6c\x9b\x47\xa9\x83\xe4\x5c\xf4\x89\xbf\x9e\xa2\xb0\x7e\x59\x74\x33\xbe\x06\x00\x00\xff\xff\x5a\xdc\x0e\xf2\x67\x03\x00\x00")

func testsuiteInvalidJsonStructureEmbeddedJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureEmbeddedJson,
		"testsuite/invalid-json-structure/embedded.json",
	)
}

func testsuiteInvalidJsonStructureEmbeddedJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureEmbeddedJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/embedded.json", size: 871, mode: os.FileMode(420), modTime: time.Unix(1489587611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureFormatJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8e\x4d\x8e\x83\x30\x0c\x85\xf7\x39\xc5\x93\xd7\x33\x17\xc8\x55\x46\xb3\x30\x24\xa0\xa8\xc1\x8e\x82\x29\xaa\x2a\xee\x5e\x01\x59\x74\xc1\xa2\xea\x2a\xb1\xdf\x8f\xbf\x3f\x07\x3c\x1d\x00\x50\x88\x73\x5f\x53\xb1\xa4\x42\x1e\xb4\xc8\x4d\x74\x15\x0c\x5a\x27\x36\xfa\x39\x4d\xb3\xd5\xa5\xb7\xa5\x46\xf2\x2d\x07\xd0\xc4\x49\xde\x66\x80\xec\x51\x76\xc7\x6e\x4f\x32\xb6\xf0\xa1\xb4\x3a\xbf\xff\xb4\xe3\x4a\x4d\xda\x8e\x77\x6b\x67\xee\x9c\x53\x20\x8f\x81\xf3\x1c\x5d\xdb\x5f\x73\x9e\x85\xe0\x52\x72\x8a\x01\xa6\x58\xab\xca\x88\x03\xe1\x3b\xea\x4e\x35\x47\x96\x6b\xec\xc0\x16\x7f\x2d\x4d\xf1\x43\x72\xf7\xff\x0a\x00\x00\xff\xff\x79\xc7\x50\x01\x64\x01\x00\x00")

func testsuiteInvalidJsonStructureFormatJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureFormatJson,
		"testsuite/invalid-json-structure/format.json",
	)
}

func testsuiteInvalidJsonStructureFormatJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureFormatJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/format.json", size: 356, mode: os.FileMode(420), modTime: time.Unix(1489587978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureGeneralJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x54\x4b\x6e\xe3\x30\x0c\xdd\xfb\x14\x84\x36\xd9\xcc\x62\xd6\xbe\xc1\x00\x33\x98\x03\x14\x5d\xa8\x36\xed\x12\x95\x68\x55\x9f\x34\x41\x90\xbb\x17\x96\xed\x44\x76\xec\xfc\x8a\x06\xe8\x2e\x79\x94\xf8\x3e\xa4\xf5\x94\x01\xec\x32\x00\x00\x51\xa2\x2b\x2c\x19\x4f\x0d\x8b\x1c\x84\x26\xe7\x88\x6b\xd0\x92\x18\x4a\x2c\x94\xb4\x32\xd6\x7e\x75\xc7\x9d\xb7\xa1\xf0\xc1\xa2\xc8\x61\xb7\xef\xc1\xb5\x54\x54\x8a\x1c\x2a\xa9\x1c\x66\x00\x11\x3f\xdf\xdf\xe2\x7b\x20\x8b\x25\x18\xdb\x18\xb4\x7e\x0b\x2b\xbf\x35\xb8\x9a\xe5\x89\x10\x80\x68\x45\x45\xde\x08\xdc\xc1\xce\x41\x29\x68\x79\x2e\x5a\x1b\x28\xdb\xc3\x2e\x01\x00\x84\x14\x39\xb4\x8d\x7a\xa4\x97\x91\xc8\xeb\x6e\xb5\x7c\x2f\x4d\xa3\x50\xb2\x80\xbb\x15\x07\x7e\xe3\xe6\x83\xa3\xe8\xab\xb2\x39\x92\x57\x4d\xf3\x05\xe2\x32\x18\x45\x85\xf4\x08\x2c\x35\xba\xb3\xdc\x95\x95\xb5\x46\xf6\x33\x41\x2d\x87\x91\x26\xb7\x90\xf2\x75\x97\xbf\x23\x76\x8b\xc1\x21\x18\x4b\x9a\x3c\xad\xb1\xdb\x99\x36\x88\x5b\x97\x85\xd8\x63\x8d\xf6\x07\x9a\x59\x18\xea\x23\x0d\x2d\x3a\x8a\x0e\x8a\x6d\xa1\x6e\x9e\xc7\x74\xad\xc4\x51\x2a\xb4\x7f\x47\x55\xf9\xa8\x09\x11\xc7\xc3\xc3\x63\x48\x17\xbe\xb7\x41\xc2\x51\xf8\x54\x4a\xe2\x49\x07\xe5\xc9\x28\xfc\x5f\x89\x1c\x7e\xa7\x05\x62\xd2\x41\x4f\x50\xdc\x14\x2a\x38\x5a\xe3\xbf\xd9\xb2\x96\x9b\xb3\x97\x66\xcb\x46\x7a\x8f\x96\x87\x47\x69\xac\xe1\x2f\x72\xed\x5f\x4f\x69\x66\xf1\x8a\x50\x95\xe3\x91\x42\xd7\x74\x0c\xcd\x44\x92\x54\xf7\x87\xdf\xe9\xf0\xc9\xa3\x3e\x69\xbd\xd8\x65\x3f\x76\xf1\xa7\xbf\x3c\x31\x71\x80\xb3\x94\x79\x71\x43\xb2\xe7\xcf\x00\x00\x00\xff\xff\x12\x70\x5b\xa7\x9a\x07\x00\x00")

func testsuiteInvalidJsonStructureGeneralJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureGeneralJson,
		"testsuite/invalid-json-structure/general.json",
	)
}

func testsuiteInvalidJsonStructureGeneralJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureGeneralJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/general.json", size: 1946, mode: os.FileMode(420), modTime: time.Unix(1489590658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureIntegerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xcf\x6a\xc3\x30\x0c\xc6\xef\x7e\x8a\x0f\x9d\x37\x68\xaf\x7e\x87\xb1\x07\x18\x3b\x98\x46\xcd\x04\xb6\x17\xfc\x27\x74\x8c\xbe\xfb\x68\xe2\x66\x23\x75\x0b\x2b\xee\x29\x44\x96\x3e\xfd\x3e\x49\x6f\x0a\xf8\x56\x00\x40\x1d\xc7\x5d\x90\x21\xc9\xa7\x27\x0d\x72\xd9\x26\x19\x2c\xbf\xee\x21\x11\x9e\x7b\x93\x64\x64\x7a\x9a\x93\x63\x0a\x79\x97\x72\x60\xd2\xa5\x1e\x20\x67\xc4\xff\xf9\x07\x28\x7d\x0d\xa7\x0c\x12\x9f\xb8\xe7\x50\xaa\xe7\xe4\x45\x9f\x34\x9e\xb7\xe5\xe1\x38\x7d\x8f\xa5\xcb\x68\xac\x74\xa4\xb1\x37\x36\xb2\x3a\xc5\x27\xf1\x0b\x54\xf1\xe2\xb2\x83\xf1\x1d\xf8\xb0\xb3\x39\xca\xc8\x2f\x73\x70\x6a\x59\xc1\x5d\xc3\x5e\x45\x3d\xab\x93\xc6\x66\x89\x5d\x74\xd1\xd8\xa8\x33\xff\x44\xbf\x62\xbf\x46\x6e\x0e\x15\xf2\x39\xd8\x80\xbc\x08\xd5\xc9\x7f\x1f\xef\x22\x2f\x33\xef\x03\x9b\xc4\x01\xe9\xc3\x78\xb8\x66\xe4\xcb\x58\xb7\x35\x37\xf7\x00\xaf\x57\xf6\x20\xf2\xca\x65\x34\xb3\x50\x9d\xf9\x03\xce\xa6\x42\xde\xea\x6c\x6e\x6f\xa1\xbd\x97\x9b\xeb\xf8\xbf\x29\xf5\xfe\x13\x00\x00\xff\xff\xec\xf4\x0e\xcc\x31\x05\x00\x00")

func testsuiteInvalidJsonStructureIntegerJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureIntegerJson,
		"testsuite/invalid-json-structure/integer.json",
	)
}

func testsuiteInvalidJsonStructureIntegerJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureIntegerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/integer.json", size: 1329, mode: os.FileMode(420), modTime: time.Unix(1489583344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureMapJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x8a\x1f\x9d\x3b\x58\xaf\x79\x83\x3d\xc3\xd8\x41\x6b\x94\x4c\x10\xdb\xc1\x56\xcb\xc6\xe8\xbb\x8f\xa6\x5e\xe8\x4c\x32\x06\x0b\x3d\x19\xff\x48\xe2\xfb\x90\x9e\x1d\xf0\xe9\x00\x80\x5a\xc9\x87\xa4\xa3\x69\x0c\xd4\x80\xd4\xc4\x67\x68\x86\xd7\x9c\x35\xf4\xb4\xbb\x96\x65\x4b\xc7\x83\x1d\x93\x50\x53\x3a\x01\xf2\xac\xe1\xe6\x0f\x90\x7d\x8c\x97\x0a\xf2\x3c\x52\x49\xcf\xd3\x7b\x2e\x73\x4e\x3c\x68\x4b\x0d\x3a\x1e\xb2\xb8\x4b\x3e\xb5\xd7\x18\x5e\xc3\xd3\x37\x49\x90\x9e\x4d\x4f\x32\xa1\x2c\x80\xd4\x18\x3f\x20\x76\x33\x6b\x99\x48\x0d\x1e\xf6\x73\xaa\x25\x5a\x50\x78\x8d\x71\x10\x0e\x95\x86\x2b\x2a\x95\xc8\x9a\x06\xbf\x6f\xad\x51\x26\xde\x57\xe3\x66\x1b\x7d\x12\x36\x49\xb0\x37\x0e\x98\x69\xb6\x5a\xcd\x7e\x49\xf4\x71\x73\xcf\xd5\xbb\xbb\x9e\x7f\xa7\x32\xb4\x90\x94\x62\xfa\x9f\xd9\x2f\xbc\x5d\x8c\x7f\xdc\x89\x7b\xf9\x0a\x00\x00\xff\xff\x45\x87\x6c\x9d\xaf\x03\x00\x00")

func testsuiteInvalidJsonStructureMapJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureMapJson,
		"testsuite/invalid-json-structure/map.json",
	)
}

func testsuiteInvalidJsonStructureMapJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureMapJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/map.json", size: 943, mode: os.FileMode(420), modTime: time.Unix(1489584611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureSetJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x8a\x1f\x9d\x3b\x58\xaf\x79\x83\x3d\xc3\xd8\xc1\x6b\x94\x4c\x90\xd8\x45\x52\xcb\xc6\xe8\xbb\x8f\xa6\x5e\xe8\x4c\x3a\x06\x0b\x3d\x19\xff\x48\xe2\xfb\x90\x9e\x03\xf0\x19\x00\x80\x5a\xb6\x9d\xca\xde\x25\x27\x6a\x40\xe2\x3c\x1a\xc4\x30\x8a\x99\xa4\x9e\x36\x97\x32\x73\x3d\xec\xfc\xa0\x4c\x4d\xe9\x04\x68\x8c\x92\xae\xfe\x00\xf9\xc7\xfe\x5c\x41\xc6\x4e\x25\x3d\x4d\xef\xa9\xcc\x39\xc6\x41\x5a\x6a\xd0\xc5\xc1\x38\x9c\xf3\xa9\xbd\xc6\x18\x25\x3d\x7d\x93\x24\xee\xa3\xcb\x91\x27\x94\x05\x90\x1a\xe3\x07\xc4\x66\x66\x2d\x13\xa9\xc1\xc3\x76\x4e\xa5\x44\x0b\x0a\xaf\x39\x0f\x1c\x53\xa5\x11\x8a\x4a\x25\x72\x4b\x23\xbe\xaf\xad\x51\x26\xde\x57\xe3\x6a\x1b\xbd\x72\x74\x56\xf8\x5b\x4c\x98\x69\xd6\x5a\xcd\x76\x49\xf4\x71\x75\xcf\x9b\x77\x77\x39\xff\x4e\x78\x68\xc1\xaa\x59\xff\x67\xf6\x0b\x6f\x97\xf3\x1f\x77\x12\x5e\xbe\x02\x00\x00\xff\xff\xdc\x50\xd2\x78\xaf\x03\x00\x00")

func testsuiteInvalidJsonStructureSetJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureSetJson,
		"testsuite/invalid-json-structure/set.json",
	)
}

func testsuiteInvalidJsonStructureSetJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureSetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/set.json", size: 943, mode: os.FileMode(420), modTime: time.Unix(1489584611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureStringJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\xd0\xc1\x4a\xc3\x40\x10\x06\xe0\xfb\x3e\xc5\xcf\x9c\x2a\x55\xb1\xd7\x7d\x06\xdf\xc0\x7a\x58\x9a\x71\x3b\x90\x4e\xc3\xee\xa4\x54\x24\xef\x2e\x49\xb7\xa6\xd4\x06\xa1\x01\x4f\x21\xc3\x3f\xff\x7e\xcc\x9b\x03\xbe\x1c\x00\x50\xc5\x79\x93\xa4\x31\xd9\x2b\x79\xd0\x4e\xf4\x95\x35\xda\x16\x92\xa1\x1c\x83\xc9\x81\xe9\xf1\x94\xcd\x96\xda\x8d\xb5\x89\xc9\x97\x75\x80\x76\x41\xf4\xe2\x1f\x20\xfb\x6c\xfa\x44\x1f\x17\x8d\x65\xf9\x94\x3d\xb7\x93\xc7\xd3\xaa\xcc\xbb\xe1\xdb\x95\x37\x0e\xa1\x96\x8a\x3c\x3e\x42\x9d\xd9\xf5\xf3\xa1\xfa\x97\x33\x1c\x27\x9c\x37\x94\xd7\xc6\x29\xe1\xd8\x3a\xfa\x3a\x57\x6c\x57\xb2\x29\xd7\xcf\xfd\x62\xe2\x60\x9c\x60\xdb\xa0\x18\x8b\x67\x13\x2f\x4e\xb8\xba\x09\x7f\xb9\xc7\xad\xc3\x01\x91\x38\xb6\x75\x48\xe0\x63\x93\x38\x67\xd9\x2b\x9a\x60\xc6\x49\x67\xc3\xcf\x3d\x1e\xb4\x5e\x57\x4b\xba\x47\x29\x3a\xc4\xfe\x89\xb9\x58\x3c\x2f\x1f\xfe\x70\xba\xf7\xef\x00\x00\x00\xff\xff\x42\x2d\x52\x0a\x4c\x03\x00\x00")

func testsuiteInvalidJsonStructureStringJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureStringJson,
		"testsuite/invalid-json-structure/string.json",
	)
}

func testsuiteInvalidJsonStructureStringJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureStringJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/string.json", size: 844, mode: os.FileMode(420), modTime: time.Unix(1489588454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureStructJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x4b\x0a\xc3\x30\x10\x43\xf7\x3e\x85\x98\x75\x4e\x90\xab\x94\x2e\x42\xe2\x94\x81\xc4\x0e\x33\x4e\xa1\x14\xdf\xbd\xf8\xd3\x12\x9b\xae\x8c\x35\x92\x78\xba\x19\xe0\x6d\x00\x80\x16\xab\xb3\xf0\x11\xd8\x3b\x1a\x41\x2b\xdb\x6d\x51\xb0\x62\x67\x55\x76\x0f\x1a\x8a\x4f\x83\x9c\x73\x38\xc5\xd2\x58\xa3\x00\xed\x13\xbb\xcb\x1f\xa0\xf0\x3a\x92\xa3\xda\xa9\x1e\x62\x7e\x63\xad\x7a\x4e\x1b\x2f\x34\x62\x9d\x36\xb5\x26\xe9\xb9\xa1\x47\x29\x15\xc8\x44\xb0\x22\x5e\x32\xcb\x1f\x92\x9e\xa3\xa7\x18\xbe\x7a\x59\xd7\x12\xaf\xde\x37\xc2\x25\x9e\x4e\x3f\x3d\xb6\x5b\x4c\xdd\xd3\xad\x89\xe6\xfe\x09\x00\x00\xff\xff\xba\x11\x32\x1d\x5d\x01\x00\x00")

func testsuiteInvalidJsonStructureStructJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureStructJson,
		"testsuite/invalid-json-structure/struct.json",
	)
}

func testsuiteInvalidJsonStructureStructJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureStructJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/struct.json", size: 349, mode: os.FileMode(420), modTime: time.Unix(1489584044, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteInvalidJsonStructureUnionJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\x41\xca\x83\x30\x10\x85\xf7\x39\xc5\x63\xd6\x9e\xc0\xab\xfc\xfc\x0b\xd1\xb1\x0c\x68\x22\x33\xb1\x20\x25\x77\x2f\xd1\xd0\xaa\xd4\x45\xa1\xab\x90\x2f\xf3\x1e\x5f\xe6\xcf\x01\x0f\x07\x00\xd4\xb1\xb5\x2a\x53\x94\xe0\xa9\x06\xc5\x65\x62\x83\x18\x46\x31\x13\x7f\xa3\x6a\x1b\xb3\xa8\x73\x1b\x67\x65\xaa\x4b\x12\xa0\xb1\x11\xbf\xbb\x63\x8b\xe7\x9a\xd9\xe7\xbe\xc2\xd3\x7a\xa6\xd2\x74\x6f\x06\xe9\xa8\x46\xdf\x0c\xc6\x2e\xf3\xb5\xe0\x52\x84\xc7\x29\x2e\xab\xc6\x07\x89\xb3\xc2\x49\xa0\xda\x63\xcb\x73\xc5\xc5\x15\x9f\xef\x6c\x58\x35\xe8\xcf\x54\xde\x5b\xeb\x43\x38\x80\x5d\x38\x3f\xbd\x78\x3a\x2e\xf4\xe2\x13\xc9\xfd\x3f\x03\x00\x00\xff\xff\xd9\x69\xb6\x6a\xe0\x01\x00\x00")

func testsuiteInvalidJsonStructureUnionJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteInvalidJsonStructureUnionJson,
		"testsuite/invalid-json-structure/union.json",
	)
}

func testsuiteInvalidJsonStructureUnionJson() (*asset, error) {
	bytes, err := testsuiteInvalidJsonStructureUnionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/invalid-json-structure/union.json", size: 480, mode: os.FileMode(420), modTime: time.Unix(1489585735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteJsonObjectBooleanJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\x41\x6a\x43\x31\x0c\x44\xf7\xff\x14\x83\xd6\x39\xc1\xbf\x4a\xc8\x42\xb5\x55\x6a\x50\xed\x20\xcb\x29\x25\xfc\xbb\x17\x3b\x0e\x0d\xa4\x21\x85\xac\x6c\x34\xa3\x79\x83\xf6\x0b\x70\x5e\x00\x80\xa2\xd4\x60\xe9\xe8\xa9\x64\x5a\x41\x6f\xa5\xa8\x70\x86\x7f\x1f\x05\x51\x82\xb2\xf1\xd0\x76\x17\x7b\x75\x6b\xc1\x9b\x09\xad\x33\x01\xa0\x4f\x4e\x7d\xf9\x0c\xea\x6b\x37\x31\x84\x6d\x78\xb6\xb9\x7d\x62\x4d\x91\x56\xb8\x35\x99\x23\x97\xea\x95\x56\xec\x67\xd8\x35\xf4\xbe\x5a\xca\xa1\x98\x49\xf0\x51\x6e\x16\xba\x18\xd9\xb9\x3b\x3e\x44\xb5\xe0\xab\x98\xc6\x5b\xf9\x4a\x7d\x67\xad\x32\xc7\xdb\xee\x29\x2f\x37\x55\x9c\x58\xdb\x5f\xac\x2e\xbe\x8e\xe8\x77\x78\x88\xf8\x3d\xd2\xdd\xed\xfe\x4f\x18\x85\x1e\x22\x86\xfa\x84\x31\xde\xc3\xd2\x7f\x87\x9f\x00\x00\x00\xff\xff\x1a\x81\x15\xf4\x38\x02\x00\x00")

func testsuiteJsonObjectBooleanJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteJsonObjectBooleanJson,
		"testsuite/json-object/boolean.json",
	)
}

func testsuiteJsonObjectBooleanJson() (*asset, error) {
	bytes, err := testsuiteJsonObjectBooleanJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/json-object/boolean.json", size: 568, mode: os.FileMode(420), modTime: time.Unix(1489594250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteJsonObjectIntegerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x96\xc1\x8e\xc2\x20\x10\x86\xef\x7d\x8a\x09\x67\x77\xa3\x6e\xf6\xd2\x77\xd8\xec\x03\x18\x0f\x6c\x3b\x2a\x09\x05\x17\x86\xea\xc6\xf8\xee\x9b\xb6\x54\x6b\x44\xa5\x69\x7b\x32\x29\x30\xdf\xc0\x37\x7f\xe2\x2a\x01\x38\x25\x00\x00\x2c\x47\x9b\x19\xb1\x27\xa1\x15\x4b\x81\x09\x45\xb8\x45\x03\xf4\xb7\x47\xc8\x31\x93\xdc\xf0\x7a\x6d\xd6\x6c\xb7\x64\x5c\x46\xce\x20\x4b\x7d\x05\x00\x56\x70\x51\x1d\x3e\x01\xab\x8e\x75\xca\x30\x38\xd7\x7b\xce\xfe\x74\xc9\xa5\xc8\x59\x0a\x64\x1c\xfa\x4f\x84\x96\x2c\x4b\x61\xe5\x8b\xb5\x45\x43\xad\x65\xda\x18\xcc\xa8\x6e\xce\x37\xd4\x6c\xe4\xc4\xab\x1d\x3b\x94\x52\xc3\x41\x1b\x99\x77\x97\x5b\xea\x86\x4b\x8b\xfe\xf3\x79\xf6\x92\xa7\x9c\x94\x50\x72\xe9\x42\xac\x6a\x71\x38\xa2\x7d\xed\x47\x94\xc5\xfb\x3c\x00\xa9\x5e\x2f\x9e\xd1\xf8\xe3\x12\x94\x2b\x7e\xd0\x04\x29\x9f\xaf\xae\x52\xff\xae\x13\x0f\x0c\x8f\x4e\x21\x94\x28\x5c\x71\x73\x99\xbe\xf3\x32\xbb\x94\x61\x29\xcc\xc7\x9c\x1e\x89\xd6\x02\xed\xb8\x82\x16\x70\xff\x10\x6f\x8b\xe1\x4a\xf1\xd7\x71\x09\xa4\x9f\x60\x86\x3b\xdd\x1a\xe4\x54\xa5\xf4\xf9\x7d\x42\xd7\xe9\x82\x62\xac\xe2\x31\x93\xce\x8a\x12\x61\x24\xbf\x97\x82\x5f\x53\x8b\xbe\x6b\x7d\x6a\xe5\x31\xc0\x90\xfc\x9e\xbc\x1b\xfb\x31\xcc\x31\xe6\xa0\xe0\xc7\x51\xd2\xdd\x94\x99\x30\xdd\x1e\x10\xa9\xba\x5f\xee\xae\xe1\x7e\x48\x19\x3b\xdc\x0f\x41\x2f\x07\xb7\x67\xba\xc7\xf1\x7b\x4d\xf7\xd4\xa2\xef\x5a\x9f\x58\x79\x0c\x6f\xc2\x70\x4f\x3b\x07\x85\x93\x24\xf6\x12\x41\x6f\x06\x64\xdb\x17\xf9\xde\xb0\x14\x96\x63\x5a\xc7\x12\x95\xff\xff\x02\xc2\x42\xa7\x5b\xa0\x83\x0e\x3c\xca\x72\xb0\x77\x9d\xe7\x1d\xa2\xd2\x14\x41\xfd\x88\x57\x91\xac\xff\x03\x00\x00\xff\xff\x89\x70\x69\x80\x84\x0b\x00\x00")

func testsuiteJsonObjectIntegerJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteJsonObjectIntegerJson,
		"testsuite/json-object/integer.json",
	)
}

func testsuiteJsonObjectIntegerJson() (*asset, error) {
	bytes, err := testsuiteJsonObjectIntegerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/json-object/integer.json", size: 2948, mode: os.FileMode(420), modTime: time.Unix(1489594341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteJsonObjectNumberJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x96\x4d\x6e\xc2\x30\x10\x46\xf7\x39\xc5\xc8\x6b\x5a\x01\x55\x37\xb9\x43\xd5\x03\x20\x16\x6e\x32\x14\x4b\x13\x9b\xda\xe3\x40\x85\xb8\x7b\x95\xc4\xe1\x47\x09\x24\x29\xc9\x0a\x29\xb6\xe7\x8d\xe7\xf9\x93\x58\x45\x00\xc7\x08\x00\x40\xa4\xe8\x12\xab\x76\xac\x8c\x16\x31\x08\xed\xb3\x2f\xb4\xc0\xbf\x3b\x84\x14\x13\x92\x56\x96\x4b\xb3\x6a\xb7\x63\xeb\x13\xf6\x16\x45\x1c\x0a\x00\x88\x4c\xaa\xe2\xec\x11\x44\x71\xec\x52\x45\xc0\xa9\xdc\x72\x0a\x87\x73\x49\x2a\x15\x31\xb0\xf5\x18\x3e\x31\x3a\x76\x22\x86\x55\xa8\x55\xd7\x6c\x36\xa6\x74\x62\xac\xc5\x84\xcb\xde\x42\x3f\xd5\x46\xc9\xb2\xd8\xb1\x45\x22\x03\x7b\x63\x29\xbd\x5e\xae\xa9\x1b\x49\x0e\xc3\xe7\xd3\xac\x93\xa7\x3d\x11\xe4\x92\x7c\x1b\xab\x58\x7c\x1e\x51\x8d\x56\x12\x84\x71\x35\x39\x8b\xd7\xf7\x16\x4c\x31\xbf\x9a\x52\xfe\xae\xa3\xc0\x6b\x77\x9a\x29\xad\x32\x9f\xdd\xdc\x66\xa0\xc9\xd9\xb9\x8a\x88\x61\x3e\xa6\x57\x42\xe7\x80\xb7\x52\x43\x0d\x68\x8e\xe1\x65\xf1\xfc\xb0\xf1\xc7\x4b\x02\x36\x0f\x30\xf3\x8e\x59\x77\x43\xbe\x2d\x4a\x2e\xe2\xf3\xf8\x3e\x6d\xd7\x19\x2a\x15\x0f\x09\x79\xa7\x72\x84\x71\xf4\x9e\xeb\x7d\x4c\xed\xb9\xd1\xf9\xd4\xc6\xfb\x00\xdb\xdc\x0f\xe4\xdd\xc8\xef\xc3\x1c\xe3\x19\x64\xf2\x30\x46\xb6\xab\x2a\x13\x66\x3b\x00\x7a\x9a\x1e\x96\xba\x4b\xb4\xef\x52\xc6\x8e\xf6\x5d\x50\xe7\xbb\x1d\x98\xed\x51\xf4\x5e\xb2\x3d\xb5\xe7\x46\xe7\x13\x1b\xef\xc3\x9b\x30\xda\xd3\x3e\x83\xcc\x13\xab\x1d\x21\x98\xcd\xff\x93\x1d\x6a\x7c\x6e\x44\x0c\xcb\x31\xa5\x63\x8e\x3a\xfc\x73\x01\xe5\xe0\xaa\x59\xe0\xbd\x69\x99\xc9\xf2\x69\xed\x26\x4d\xaf\x88\xda\x70\x0f\xea\x5b\x7f\x13\xd1\xfa\x2f\x00\x00\xff\xff\x92\x1f\x3f\x7f\x18\x0b\x00\x00")

func testsuiteJsonObjectNumberJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteJsonObjectNumberJson,
		"testsuite/json-object/number.json",
	)
}

func testsuiteJsonObjectNumberJson() (*asset, error) {
	bytes, err := testsuiteJsonObjectNumberJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/json-object/number.json", size: 2840, mode: os.FileMode(420), modTime: time.Unix(1489594341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsuiteJsonObjectStringJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xd1\x6e\x82\x30\x14\x86\xef\x79\x8a\x93\xde\xce\x25\xdb\x9c\x17\xe3\x19\xf6\x06\xc6\x8b\x13\x38\x6a\x93\xd2\xb2\xf6\xe0\x34\x8b\xef\xbe\x80\x05\xb1\x54\x30\xd3\x5d\x11\x7a\xda\xff\xff\xfb\x7f\xb0\x4c\x00\x7e\x12\x00\x00\x91\x93\xcb\xac\x2c\x59\x1a\x2d\x52\x10\x8e\xad\xd4\x1b\xe0\x43\x49\x90\x53\xa6\xd0\x62\x33\x9a\x9d\x76\x3b\xb6\x55\xc6\x95\x25\x91\x7a\x01\x00\x51\xa0\xd4\xbd\x77\x00\x51\x1f\x3f\xab\x09\x3f\x38\x36\xcf\xa3\x97\xda\xa1\x92\xb9\x48\x81\x6d\x45\x7e\x89\xc9\xb1\x13\x29\x2c\xfd\x81\x9e\x62\x10\x53\xea\xcc\x58\x4b\x19\x37\x49\x7d\xba\xd3\x46\x64\x14\x29\x2c\x7a\x4b\xad\xd3\x1a\x95\xa3\x36\xcb\x6c\x44\x5d\x57\x4a\xc1\x0e\x55\x15\x53\xae\x87\xf7\x88\xfb\x86\xaf\xc9\x8b\x2d\x29\x65\xe0\xdb\x58\x95\x8b\x88\x4f\x5d\xd7\x45\x9f\xab\xa4\x33\x0c\xad\x0a\xa9\x65\x51\x15\xa0\x48\x6f\x78\xdb\xa8\x45\x08\x86\xfc\x42\x7a\xb3\x8e\xb3\xd4\x9f\x27\xa5\x14\xe6\x49\x9b\xa0\xe1\x39\xa0\x19\xb0\xec\xb4\x83\x84\x8a\x9c\x03\xde\xa2\x86\x48\xd6\xcb\x5a\xe4\x79\x6d\xd8\x79\xaf\xf1\xd0\x82\xbe\x2a\x54\xc0\x66\xd2\x61\x6d\xcc\xd0\xa2\xab\x7b\xc4\x61\x63\x09\x99\xec\x8d\xf7\x88\xe0\x8d\xb8\x25\x35\xd8\x6b\x58\x71\xff\x50\xac\xb8\xff\x47\xac\xc3\xac\x93\x58\x6f\xe9\xfc\x4c\x75\xc2\xe0\x41\x54\xa7\xae\x31\x46\xb5\xf7\x99\x26\xa3\xff\x6b\x89\xcc\x64\x35\x94\xd6\x94\x64\xf9\x70\x37\x5a\x2f\x58\x8f\x96\x2f\xcf\x1f\xab\x27\xf1\x18\xbe\x6d\xd0\x02\x39\x8b\xb4\xf1\xfa\x36\x7f\x5f\xfc\xad\xf5\x4e\x59\xba\x2b\xe2\x51\xa0\x61\xc5\xc7\x64\xf5\x1b\x00\x00\xff\xff\x8e\x14\x6f\x31\xe4\x06\x00\x00")

func testsuiteJsonObjectStringJsonBytes() ([]byte, error) {
	return bindataRead(
		_testsuiteJsonObjectStringJson,
		"testsuite/json-object/string.json",
	)
}

func testsuiteJsonObjectStringJson() (*asset, error) {
	bytes, err := testsuiteJsonObjectStringJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testsuite/json-object/string.json", size: 1764, mode: os.FileMode(420), modTime: time.Unix(1489596732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testsuite/invalid-json-structure/array.json": testsuiteInvalidJsonStructureArrayJson,
	"testsuite/invalid-json-structure/embedded.json": testsuiteInvalidJsonStructureEmbeddedJson,
	"testsuite/invalid-json-structure/format.json": testsuiteInvalidJsonStructureFormatJson,
	"testsuite/invalid-json-structure/general.json": testsuiteInvalidJsonStructureGeneralJson,
	"testsuite/invalid-json-structure/integer.json": testsuiteInvalidJsonStructureIntegerJson,
	"testsuite/invalid-json-structure/map.json": testsuiteInvalidJsonStructureMapJson,
	"testsuite/invalid-json-structure/set.json": testsuiteInvalidJsonStructureSetJson,
	"testsuite/invalid-json-structure/string.json": testsuiteInvalidJsonStructureStringJson,
	"testsuite/invalid-json-structure/struct.json": testsuiteInvalidJsonStructureStructJson,
	"testsuite/invalid-json-structure/union.json": testsuiteInvalidJsonStructureUnionJson,
	"testsuite/json-object/boolean.json": testsuiteJsonObjectBooleanJson,
	"testsuite/json-object/integer.json": testsuiteJsonObjectIntegerJson,
	"testsuite/json-object/number.json": testsuiteJsonObjectNumberJson,
	"testsuite/json-object/string.json": testsuiteJsonObjectStringJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"testsuite": &bintree{nil, map[string]*bintree{
		"invalid-json-structure": &bintree{nil, map[string]*bintree{
			"array.json": &bintree{testsuiteInvalidJsonStructureArrayJson, map[string]*bintree{}},
			"embedded.json": &bintree{testsuiteInvalidJsonStructureEmbeddedJson, map[string]*bintree{}},
			"format.json": &bintree{testsuiteInvalidJsonStructureFormatJson, map[string]*bintree{}},
			"general.json": &bintree{testsuiteInvalidJsonStructureGeneralJson, map[string]*bintree{}},
			"integer.json": &bintree{testsuiteInvalidJsonStructureIntegerJson, map[string]*bintree{}},
			"map.json": &bintree{testsuiteInvalidJsonStructureMapJson, map[string]*bintree{}},
			"set.json": &bintree{testsuiteInvalidJsonStructureSetJson, map[string]*bintree{}},
			"string.json": &bintree{testsuiteInvalidJsonStructureStringJson, map[string]*bintree{}},
			"struct.json": &bintree{testsuiteInvalidJsonStructureStructJson, map[string]*bintree{}},
			"union.json": &bintree{testsuiteInvalidJsonStructureUnionJson, map[string]*bintree{}},
		}},
		"json-object": &bintree{nil, map[string]*bintree{
			"boolean.json": &bintree{testsuiteJsonObjectBooleanJson, map[string]*bintree{}},
			"integer.json": &bintree{testsuiteJsonObjectIntegerJson, map[string]*bintree{}},
			"number.json": &bintree{testsuiteJsonObjectNumberJson, map[string]*bintree{}},
			"string.json": &bintree{testsuiteJsonObjectStringJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

