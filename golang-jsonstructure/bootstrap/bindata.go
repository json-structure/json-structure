// Code generated by go-bindata.
// sources:
// json-structure.json
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsonStructureJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x4d\x4f\xe3\x30\x10\xbd\xf7\x57\x58\x3e\x67\x25\xce\xbd\xb1\xe2\x02\x5a\xca\x01\x38\xb1\x7b\x30\x65\xda\x35\xb2\x9d\xc8\x1f\x08\x84\xfa\xdf\x57\x71\x1c\xc7\x93\xc4\x09\xb0\xcd\x6e\x2f\x95\x6a\x4f\xde\xbc\x19\xbf\xf1\xd8\x7e\x5f\x11\x42\x2d\xb7\x02\xe8\x9a\xd0\xab\xdb\x9b\x0d\xb9\xb5\xda\x6d\xad\xd3\x40\x24\x58\xf6\xcd\xb4\x7f\x69\x51\xdb\xee\x34\xdb\x4b\x50\xd6\xd0\x35\xa9\x3f\x26\x84\xaa\x52\x29\xd8\x33\xcb\x5f\x20\x0e\x12\x42\x25\x57\x5c\x3a\x49\xd7\xe4\xcc\x0f\x1d\x8a\xc6\xbc\xd4\x1b\x27\x44\x6a\xa9\x9c\x10\xec\xd1\x53\xb0\xda\x41\xd1\x8e\x97\x95\xe5\xa5\x62\x22\x8c\x23\x94\x6d\x29\x65\xa9\x52\x94\x27\xd8\x31\x27\x6c\x32\x54\x87\xf6\x56\xf9\xc8\x9e\x4d\xa9\x68\xd1\x8d\xff\x74\x67\xe7\x17\x17\x74\x4d\x1e\x22\x21\xf2\x2b\x4c\x1f\x22\x01\x50\x9e\xff\x08\x9e\x01\x3b\x0b\x97\xcc\x73\x0b\xd2\x20\xa4\x3e\xb7\x38\x71\x18\xb0\xd8\x95\x5a\xb2\x5e\x5c\x73\x0e\x23\x4f\xab\xb9\xda\xd3\x01\x66\x92\xf2\x2f\xa0\x3e\x96\xa5\x00\x86\x12\xda\x65\x7f\xc7\x84\x81\x81\xc3\x64\x2d\x17\x75\xb8\x6a\x7f\xbd\x6b\x0f\x90\x48\xf5\x7b\xc0\x49\x64\x93\x64\xca\x6d\xbb\x45\xa5\x3b\x0e\xe2\xc9\xe4\xe9\x06\x01\x8e\xd1\x1d\x5d\xe5\xb0\x12\x45\x3a\x17\xf4\xf5\xd0\x05\x18\x45\x98\x08\x01\xe9\xfe\xb6\x81\x39\xb9\x00\xc2\x6c\xca\x3f\xc1\xad\x98\xb5\xa0\xd5\x67\xa0\xa7\x2a\x14\x83\x4b\xae\x7e\x80\xda\xdb\xdf\x39\x78\xae\x2c\xec\x41\xcf\xe2\x17\x78\x2f\xcb\xb9\x63\xaf\x8b\xbb\x1b\x5d\xfa\x2b\x53\x9e\xa0\x72\xfd\xee\x35\xcb\x7d\xe3\xe4\x23\xe8\xd3\x63\xaf\x1a\x5e\xb9\xa5\x76\xc2\xf2\x4a\xc0\xcd\x2e\x87\x1e\xbe\x3f\x92\xb2\x62\xc7\xfc\x1b\x5f\x79\xd9\x2e\x07\x0e\xaf\x5b\xe1\x0c\x7f\x81\xeb\x25\x43\xe8\xbc\x1c\x3d\x96\x51\xd1\x5e\x86\x42\x4e\x54\x9b\xc2\x6c\x5a\xed\x4c\x6a\xf7\xeb\xda\x6c\xf7\x91\x8f\xf4\x84\xba\x84\x4e\xae\xb8\x82\xf7\xcc\x6a\x8e\x70\x49\x90\x25\xab\x30\xec\xd8\x11\x2a\xb1\xbf\x7b\xab\xe0\x02\xb6\x82\x26\xd3\x87\x99\xbc\x9d\x6b\xcd\xde\x4e\x2f\x6d\xcc\xd3\xca\x64\x6d\xf2\x24\x39\x4c\x42\x6f\x7b\xb9\x9c\xfa\xfa\xe8\x6d\x72\x69\x6f\xa3\x8b\x7a\xcd\xaa\x5c\xc1\x9e\x87\xc4\x2e\x54\xaf\xb5\x64\xe7\x6b\x15\xec\x7f\xa2\x57\x5f\x59\x66\xe9\xdd\x2b\x7e\x8a\x87\x0c\xe7\x69\x65\x94\x86\xcf\xf8\x3d\xdc\x7f\xb1\x8f\xdc\x1b\xd0\x77\x38\xb6\x4f\xe5\xed\x03\x79\x99\x61\x10\x59\x8f\x30\x68\x72\x57\xac\xb2\xd9\x8a\x97\x8f\x35\x21\xef\xdd\x77\xed\x5d\x09\x6f\x3f\xb1\x25\xa6\xa6\x6d\xa3\x44\xa6\xaa\x3d\xf2\x21\xd3\xb6\x69\xa6\x96\xa6\xbd\xd3\x20\xcb\x70\xd3\x41\x96\xcf\xcd\x11\x98\x60\x4b\x7f\x30\xee\x23\x36\x1d\xb1\x8f\xe8\xfb\x51\x6a\xc9\x42\x0f\xc0\x96\xa1\x14\x11\x24\xd8\xe0\x19\x41\x42\x0f\x4f\xfa\xed\xa7\x6f\x56\x6f\x4a\xc8\xcc\x85\x3a\xc3\x66\x4d\xf5\x61\x43\x13\x72\x88\x0d\x5b\xc5\xf5\xf5\x10\x2f\xbe\x92\xf1\xae\x8e\xc7\xd5\x38\xd4\x62\x7c\x09\x3a\xe2\x4b\x03\x97\x55\xa9\xed\xc4\x4e\x31\x05\x8a\xab\x77\xba\xf9\x65\x2b\x25\x52\x79\x02\xb3\xd5\xdc\x3f\x44\x1c\x37\xc6\xe1\xa3\xd8\x62\x51\xce\x3d\x16\x8d\x94\xf7\x12\x34\x46\x4e\x1a\x03\x2a\x48\x82\x93\x5f\x27\xe2\x5d\x1d\xfe\x04\x00\x00\xff\xff\x57\x73\xa1\x41\x93\x14\x00\x00")

func jsonStructureJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonStructureJson,
		"json-structure.json",
	)
}

func jsonStructureJson() (*asset, error) {
	bytes, err := jsonStructureJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json-structure.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"json-structure.json": jsonStructureJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"json-structure.json": &bintree{jsonStructureJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

