// Code generated by go-bindata.
// sources:
// json-structure.json
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsonStructureJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x4d\x4f\xe3\x30\x10\xbd\xf7\x57\x58\x3e\x67\x25\xce\xbd\xb1\xe2\x02\x5a\xe0\x00\x9c\xd8\x3d\x98\x32\xed\x1a\xd9\x4e\xe4\x0f\x04\x42\xfd\xef\xab\x38\x76\xe2\x49\xed\xb4\xcb\x36\x6c\x4f\x55\x9d\xe7\x37\xf3\xc6\x33\x1e\xdb\x1f\x0b\x42\xa8\xe5\x56\x00\x5d\x12\x7a\x75\x77\x7b\x43\xee\xac\x76\x2b\xeb\x34\x10\x09\x96\x7d\x33\xf1\x2f\xad\x5a\xec\x5a\xb3\x8d\x04\x65\x0d\x5d\x92\x76\x32\x21\x54\xd5\x4a\xc1\x86\x59\xfe\x0a\xfd\x20\x21\x54\x72\xc5\xa5\x93\x74\x49\xce\xfc\xd0\xb6\xea\xe0\x75\x63\x79\xad\x98\x48\xb1\xca\x09\xc1\x9e\xbc\x13\x56\x3b\xa8\xe2\xf8\x33\xac\x99\x13\x96\x2e\x49\x8b\x40\x34\xab\x5a\xca\x5a\xa5\x24\x03\x38\x0e\xb5\xda\xde\x1b\x2f\xed\xc5\xd4\x8a\x56\xc3\xf8\x4f\x77\x76\x7e\x71\x41\x97\xe4\x31\xf1\x88\xfc\x0a\x80\x6d\xef\x01\x28\x2f\x21\xc3\x68\xc0\x1e\x40\x98\x20\xb8\x05\x69\x10\xd7\xd8\xbf\xfe\xc3\x76\x91\xfe\x46\xc9\x8d\xe6\x92\xb7\x61\x4e\x59\x90\xe1\x10\x94\xc1\x2c\x5d\xd7\x5a\xb2\x51\x4c\xf6\xbb\xda\x6b\xb4\x9a\xab\x0d\xdd\x89\x4a\xb2\x5e\x99\xc8\x3c\xd5\xb5\x00\x86\xc2\x3d\xac\xcd\x9a\x09\x03\x58\xde\x22\x50\x7b\x82\x24\xb1\xbe\x07\x9e\x44\x6c\xe2\x98\x5b\x0d\xf1\xa7\x6b\x0e\xe2\xd9\x94\x65\x26\xa1\xcb\x09\xcd\x2e\x49\x10\x5f\xa5\xdf\x42\x3a\x3c\x0e\x22\xfb\x9c\x29\xad\xda\x5d\x47\x73\x92\x22\xc2\xd7\x54\x43\xc2\xdb\x30\x6b\x41\xab\xbf\xa1\x9e\x2e\x2b\x4c\x2f\xb9\xfa\x01\x6a\x63\x7f\x97\x0c\x70\x65\x61\x03\xfa\x00\x0b\x15\xde\x85\x4a\x06\xd9\xdb\x17\x18\xcc\x26\xc1\x95\xa9\x4f\x34\x8f\xfd\xc6\xb3\xd7\xff\x1b\x27\x9f\x40\x9f\xa6\x02\xd5\xf9\x56\x5a\x74\x27\x2c\x6f\x04\xdc\xae\x4b\xec\x61\xfe\xd1\xb2\xac\xef\x7b\xff\x66\xad\x9c\xc4\x73\xd2\xc3\xdb\x4a\x38\xc3\x5f\xe1\x7a\x5e\x19\x83\x9d\x19\xf4\x64\x53\xf8\x32\x14\x77\xa1\x75\xde\xc4\x2c\x9a\xcc\xe4\xcf\x67\x69\xdc\x5b\x0e\xe9\x17\x6d\x41\x9d\x64\xa9\x05\x0f\x0a\x6b\x9a\xf1\x27\x61\x96\xac\xc1\xb4\xb9\xf3\x50\x82\xbf\x7f\x6f\xe0\x02\x56\x82\x26\x9f\xb7\x7b\x62\x77\xae\x35\x7b\x3f\xcd\xd0\x31\xef\x5a\x21\x72\x93\x47\xc3\xdd\x40\x8c\xb6\x9b\xcb\xa9\xd9\x33\x34\xd1\xf9\xed\x65\x17\xf7\x9a\x35\xa5\xe2\x3d\x0f\xc1\x9d\xa9\x76\xdb\xd4\xdd\x5f\xb7\x60\xff\x93\x7b\xed\x4d\x64\xaf\x7b\x0f\x8a\x9f\xea\x11\xc4\x79\xd7\x0a\xf9\x86\xef\x04\x23\xde\xaf\xd8\x53\x1e\x0c\xe8\x7b\xac\xed\xd3\xb1\xdb\xb9\x9f\x1d\x16\xb7\x3d\x1e\xf6\xaa\x32\x1e\x76\xb1\xad\x16\xc5\x68\xf6\x17\x99\x25\x21\x1f\xc3\xbc\x78\xf7\xc2\xdb\x54\xdf\x42\x53\x68\x6c\xac\x08\xaa\xe2\x81\x11\x41\x63\x93\x4d\x91\x26\xde\x8f\x10\x32\xdc\x9a\x10\xf2\xa5\x3b\x44\x13\x8c\xf4\x47\xeb\x31\x63\xd7\x41\xc7\x8c\xbe\x77\xa5\x48\x16\xfa\x05\x46\x86\x72\x45\x94\x60\x83\x65\x44\x09\x23\x3e\xe9\xb7\xa8\x31\xac\xdd\xb8\x10\xcc\x85\x5a\xc4\xb0\xae\x42\x31\xd0\x84\x18\x62\x60\xcc\xc8\x71\x3e\xf4\x17\x69\xc9\xf8\x50\xeb\xf9\x6c\xdd\xcd\xd5\xfe\x1d\xe8\xa8\x4f\x05\x5c\x36\xb5\xb6\x13\x35\x31\x4d\x8b\x2b\x7c\xba\x51\x16\xab\x25\x79\x4f\x32\x2b\xcd\xbd\xc1\x63\xeb\xdc\x7d\x18\x9b\x51\x69\xe1\xb5\x68\xaa\xcc\xe7\x71\x24\x73\x36\xd9\x71\x06\x25\xe3\xe4\xec\x24\x8d\x17\xdb\x3f\x01\x00\x00\xff\xff\x4f\xbc\xcc\x69\x9b\x14\x00\x00")

func jsonStructureJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonStructureJson,
		"json-structure.json",
	)
}

func jsonStructureJson() (*asset, error) {
	bytes, err := jsonStructureJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json-structure.json", size: 5275, mode: os.FileMode(420), modTime: time.Unix(1489602476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"json-structure.json": jsonStructureJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"json-structure.json": &bintree{jsonStructureJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

