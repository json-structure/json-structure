// Code generated by go-bindata.
// sources:
// json-structure.json
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsonStructureJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x4f\x6f\xe3\x2e\x10\xbd\xe7\x53\x20\xce\xfe\x49\xbf\x73\x6e\x5d\xed\xa5\xd5\xb6\x3d\xb4\x3d\x55\x7b\xa0\xee\x24\x4b\x65\xc0\xe2\x4f\xd5\xaa\xca\x77\x5f\x19\x83\xcd\x38\xe0\x64\xbb\x75\x36\xa7\x28\xe6\xf1\x66\xde\x30\xc3\x00\x1f\x2b\x42\xa8\xe5\xb6\x01\xba\x26\xf4\xea\xee\xf6\x86\xdc\x59\xed\x6a\xeb\x34\x10\x01\x96\xfd\x67\xe2\x5f\x5a\x75\xd8\x8d\x66\x5b\x01\xd2\x1a\xba\x26\xdd\x64\x42\xa8\x54\x52\xc2\x96\x59\xfe\x0a\xc3\x47\x42\xa8\xe0\x92\x0b\x27\xe8\x9a\xfc\xef\x3f\xed\xaa\x1e\xae\x5a\xcb\x95\x64\x4d\x8a\x95\xae\x69\xd8\x93\x77\xc2\x6a\x07\x55\xfc\xfe\x0c\x1b\xe6\x1a\x4b\xd7\xa4\x43\x20\x9a\x5a\x09\xa1\x64\x4a\x32\x82\xe3\xa7\x4e\xdb\x7b\xeb\xa5\xbd\x18\x25\x69\x35\x7e\xaf\x95\x68\x95\xe9\x86\x1e\x13\x97\xc8\xcf\x80\xd8\x0d\x2e\x80\xf4\x1a\x32\x94\x06\xec\x31\x8c\x09\x84\x5b\x10\x06\x91\x4d\x3d\x1c\x06\x76\xab\xf4\x37\x8a\x6e\x35\x17\xbc\x0b\x74\xca\x82\x2d\x87\xb8\x8c\x76\xe9\x46\x69\xc1\x26\x61\x39\xc2\xd9\x41\xa6\xd5\x5c\x6e\xe9\x5e\x60\x92\x35\xcb\x04\xe7\x49\xa9\x06\x18\x0a\xf9\xb8\x3e\x1b\xd6\x18\xc0\x02\x57\x81\xda\x13\x24\xc9\xf5\x2d\xf0\x24\x72\x13\xc7\x5c\x3d\x2e\x01\xdd\x70\x68\x9e\xcd\x8c\xce\x24\x7a\x39\xa5\xd9\x55\x09\xea\xab\x74\x2c\xa4\xc4\xe3\xa8\x72\xc8\x9b\xd2\xc2\xdd\xf5\x34\xe7\xa9\x22\x8c\xa6\x22\x12\xde\x96\x59\x0b\x5a\xfe\x09\xf5\x81\xe2\xc2\xfc\x82\xcb\x1f\x20\xb7\xf6\x57\xc9\x02\x97\x16\xb6\xa0\x8f\x31\x51\xe1\xdd\xa8\x64\x91\xbd\x9d\xc2\x62\x36\x11\xae\x8c\x3a\xd7\x64\xf6\x1b\xd0\x41\x01\x37\x4e\x3c\x81\x3e\x53\x09\xb2\x77\xae\xb4\xee\xae\xb1\xbc\x6d\xe0\x76\x53\x62\x0f\xf3\xbf\x2e\xd3\x86\x1e\xf8\x97\xe6\xca\x99\xbc\x28\x3f\xbc\xd5\x8d\x33\xfc\x15\xae\x17\x16\x32\x1a\x5a\x42\x51\x36\x91\x2f\x43\x91\x97\x1a\xe9\x4d\xcc\xa5\xd9\x84\xfe\x7c\xae\xc6\x4d\xe6\x98\xde\xd1\xd5\xd5\x79\x56\x5c\x70\xa1\xb0\xac\x19\x87\x12\x66\xc1\x5a\x4c\x9b\x3b\x1f\x25\xf8\xfb\xf7\x16\xbe\x43\xdd\xd0\x64\x78\x77\x20\x78\x17\x5a\xb3\xf7\x33\x8d\x1d\xf3\xbe\x15\x42\x37\x7b\x56\xdc\x8f\xc4\x64\xd7\xb9\x9c\x9b\xbd\x44\x43\x3d\x81\xc1\xec\xfa\x5e\xb3\xb6\x58\xc1\x17\x21\xbe\x0b\x15\x70\x97\xbe\x87\x8b\x17\xec\xbf\xf2\xaf\xbb\x9f\x1c\xf4\xef\x41\xf2\xb3\x3d\x90\x38\xef\x5b\x21\xe7\xf0\x3d\x61\xc2\x7b\x8a\x9d\xe5\xc1\x80\xbe\xc7\xda\x3e\x1f\xbc\xbd\x5b\xdb\x71\x81\x3b\xe0\xe2\x20\x2b\xe3\x62\x1f\xdc\x6a\x55\x0c\xe7\x70\xb9\x59\x13\xf2\x31\xce\x8b\x17\x32\xbc\x59\x0d\xbd\x34\x85\xc6\x0e\x8b\xa0\x32\x9e\x1f\x11\x34\x36\xdb\x14\x69\xe2\x9d\x09\x21\xc3\x4d\x0a\x21\x5f\xfa\x43\x35\xc1\x48\x7f\xd4\x9e\x32\xf6\x9d\x74\xca\xe8\x5b\x58\x8a\x64\xa1\x6d\x60\x64\x28\x58\x44\x09\x36\x58\x46\x94\x30\xe1\x13\x7e\x9b\x9a\xc2\xba\xcd\x0b\xc1\x5c\xa8\x46\x0c\xeb\x6b\x14\x03\x4d\x88\x21\x06\xc6\x94\x9c\xe6\xc3\x70\xbb\x16\x8c\x8f\xd5\x9e\x4f\xd7\xfd\x64\x1d\x1e\x88\xbe\xf6\x01\x81\x8b\x56\x69\x3b\x57\x15\xf3\xbc\xb8\xc8\xe7\x1b\x66\xb1\x5e\x92\xa7\x26\x53\x6b\xee\x0d\x7e\xb9\xd2\xfd\x47\xb3\x25\xb5\x16\x1e\x92\xe6\x4a\x7d\x21\x4f\x32\xc7\x94\x3d\x6f\x50\x46\xce\xce\x4e\x72\x79\xb5\xfb\x1d\x00\x00\xff\xff\x59\xfe\x85\xb3\xb9\x14\x00\x00")

func jsonStructureJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonStructureJson,
		"json-structure.json",
	)
}

func jsonStructureJson() (*asset, error) {
	bytes, err := jsonStructureJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json-structure.json", size: 5305, mode: os.FileMode(420), modTime: time.Unix(1489458618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"json-structure.json": jsonStructureJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"json-structure.json": &bintree{jsonStructureJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
